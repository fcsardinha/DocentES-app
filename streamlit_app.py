import streamlit as st
import unicodedata
import pandas as pd
import plotly.express as px

# --- CONFIGURA√á√ÉO DA P√ÅGINA ---
st.set_page_config(
    page_title="DocentES | Censo Escolar",
    page_icon="üë©üèª‚Äçüè´",
    layout="wide"
)

# --- FUN√á√ÉO PARA CARREGAR TODOS OS DADOS ---
@st.cache_data
def carregar_dados():
    """
    Esta fun√ß√£o carrega todos os 5 arquivos CSV em DataFrames separados
    e os retorna em um dicion√°rio para f√°cil acesso.
    """
    # Nomes dos arquivos
    nomes_arquivos = {
        "dependencia": "docentes_dependencia.csv",
        "etapas": "docentes_etapas.csv",
        "formacao": "docentes_formacao.csv",
        "idade": "docentes_idade.csv",
        "vinculo": "docentes_vinculo.csv"
    }
    
    dataframes = {}
    for nome, caminho in nomes_arquivos.items():
        # Carrega cada dataframe usando ';' como separador
        df = pd.read_csv(caminho, delimiter=';')
        df.columns = df.columns.str.strip()
        dataframes[nome] = df
            
    return dataframes

# Carrega todos os dataframes
try:
    dfs = carregar_dados()
except FileNotFoundError as e:
    st.error(f"Erro ao carregar os dados: O arquivo {e.filename} n√£o foi encontrado.")
    st.info("Por favor, certifique-se de que todos os 5 arquivos CSV est√£o na mesma pasta que o app.py.")
    st.stop()

# --- DEFININDO BARRA LATERAL COM FILTROS (Ano e Munic√≠pio) ---

# Definindo fun√ß√£o auxiliar para normalizar texto para ordena√ß√£o
def normalizar_para_ordenacao(texto):
    """
    Remove acentos de uma string para us√°-la como chave de ordena√ß√£o.
    Ex: '√Åguia Branca' -> 'Aguia Branca'
    """
    # Normaliza a string para decompor os caracteres acentuados
    texto_normalizado = unicodedata.normalize('NFD', texto)
    # Remove os caracteres de combina√ß√£o (acentos)
    return "".join(c for c in texto_normalizado if unicodedata.category(c) != 'Mn')

# Foi usado o dataframe de 'etapas' como base para criar os filtros.
st.sidebar.header("‚öôÔ∏è Filtros")
st.sidebar.markdown("Use os filtros abaixo para selecionar o ano e o munic√≠pio desejados.")

# Filtro de Ano
ano_selecionado = st.sidebar.selectbox(
    "Selecione o Ano",
    options=sorted(
                    dfs['etapas']['Ano'].unique(), 
                    reverse=True
                  )
)

# Filtro de Munic√≠pio
lista_municipios = sorted(
    dfs['etapas']['Munic√≠pio'].unique(),
    key=normalizar_para_ordenacao # Usando a fun√ß√£o de normaliza√ß√£o
    )
municipio_selecionado = st.sidebar.selectbox(
    "Selecione o Munic√≠pio",
    options=lista_municipios
)

# --- CORPO PRINCIPAL DO APP ---

# --- T√çTULO E INTRODU√á√ÉO ---
st.title("üë©üèΩ‚Äçüè´ DocentES üë®üèª‚Äçüè´")
st.markdown(
    "Bem-vindo √† DocentES, a plataforma sobre os Docentes do Esp√≠rito Santo!"
)
st.image("https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhWSVR_PA-xWPXwdQ5qyRDWAZZdVA1JhdQuaT6yI926pYTAg0boScUh3J-lsiu1i3KDyHJQmN_OgNx6HX4Zun6XDIRfqNXJe8CdyKcnwDymZp8P52JvRrKav0otT263CjHKyS_RitA5VPJFOg6NJ-uqRwuksj2r_J1mna9CnfEVq4psg-QMaH4bq2Uy2w/w485-h335/fc-removebg-preview.png", width=400)
st.markdown("An√°lise interativa dos dados de docentes do Esp√≠rito Santo, com base nas Sinopses Estat√≠sticas do Censo Escolar da Educa√ß√£o B√°sica.")
st.write("Aqui voc√™ pode explorar dados sobre os professores do estado, incluindo informa√ß√µes demogr√°ficas, forma√ß√£o acad√™mica, e muito mais.")

st.markdown("---")

# --- CRIA√á√ÉO DAS ABAS (TABS) ---
st.subheader(f"Exibindo dados para: {municipio_selecionado} ({ano_selecionado})")

# Nomeando as abas tem√°ticas
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "üìä Etapas de Ensino",
    "üìä Faixa Et√°ria e Sexo",
    "üìä Forma√ß√£o Acad√™mica",
    "üìä V√≠nculo Funcional",
    "üìä Depend√™ncia e Localiza√ß√£o"
])

# --- ABA 1: ETAPAS DE ENSINO ---
with tab1:
    st.markdown("#### Docentes por Etapa de Ensino")
    
    # Filtra o dataframe espec√≠fico desta aba
    df_filtrado = dfs['etapas'][
        (dfs['etapas']['Ano'] == ano_selecionado) &
        (dfs['etapas']['Munic√≠pio'] == municipio_selecionado)
    ]
    
    # Prepara os dados para o gr√°fico (transforma colunas em linhas)
    colunas_etapas = ['Creche', 'Pr√©-Escola', 'EF - Anos Iniciais', 'EF - Anos Finais', 'EM Proped√™utico', 'EM Integrado']
    dados_grafico = df_filtrado[colunas_etapas].melt(var_name='Etapa de Ensino', value_name='Quant. de Docentes')
    
    # Cria e exibe o gr√°fico
    fig = px.bar(dados_grafico, x='Etapa de Ensino', y='Quant. de Docentes', text_auto=True, title="Quantidade de docentes por etapa de ensino, segundo o munic√≠pio")
    st.plotly_chart(fig, use_container_width=True)
    st.dataframe(df_filtrado)
    
    # Mensagem explicativa sobre os dados
    st.info("O mesmo docente pode ser contabilizado mais de uma vez, por atuar em diferentes etapas de ensino.")


# --- ABA 2: FAIXA ET√ÅRIA E SEXO ---
with tab2:
    st.markdown("#### Docentes por Faixa Et√°ria e Sexo")
    
    # Filtra o dataframe espec√≠fico desta aba
    df_filtrado = dfs['idade'][
        (dfs['idade']['Ano'] == ano_selecionado) &
        (dfs['idade']['Munic√≠pio'] == municipio_selecionado)
    ]
    
    # Prepara os dados para o gr√°fico
    colunas_idade = ['At√© 24 anos', 'De 25 a 29 anos', 'De 30 a 39 anos', 'De 40 a 49 anos', 'De 50 a 54 anos', 'De 55 a 59 anos', '60 anos ou mais']
    dados_grafico = df_filtrado.melt(id_vars=['Sexo'], value_vars=colunas_idade, var_name='Faixa Et√°ria', value_name='Quant. de Docentes')
    
    # Cria o gr√°fico de barras agrupado por sexo
    fig = px.bar(dados_grafico, x='Faixa Et√°ria', y='Quant. de Docentes', color='Sexo', barmode='group', text_auto=True, title="Quantidade de docentes por faixa et√°ria e sexo, segundo o munic√≠pio")
    st.plotly_chart(fig, use_container_width=True)
    st.dataframe(df_filtrado)


# --- ABA 3: N√çVEL DE FORMA√á√ÉO ---
with tab3:
    st.markdown("#### Docentes por Escolaridade ou N√≠vel de Forma√ß√£o Acad√™mica")
    # Filtra o dataframe espec√≠fico desta aba
    df_filtrado = dfs['formacao'][
        (dfs['formacao']['Ano'] == ano_selecionado) &
        (dfs['formacao']['Munic√≠pio'] == municipio_selecionado)
    ]
        
    # Prepara os dados para o gr√°fico (transforma colunas em linhas)
    colunas_formacao = ['Ensino Fundamental', 'Ensino M√©dio', 'Gradua√ß√£o - Licenciatura', 'Gradua√ß√£o - Sem Licenciatura', 'Especializa√ß√£o', 'Mestrado', 'Doutorado']
    dados_grafico = df_filtrado[colunas_formacao].melt(var_name='Escolaridade / Forma√ß√£o Acad√™mica', value_name='Quant. de Docentes')
    
    # Cria e exibe o gr√°fico
    fig = px.bar(dados_grafico, x='Quant. de Docentes', y='Escolaridade / Forma√ß√£o Acad√™mica', text_auto=True, title="Quantidade de docentes por escolaridade ou forma√ß√£o acad√™mica, segundo o munic√≠pio", orientation='h')
    st.plotly_chart(fig, use_container_width=True)
    st.dataframe(df_filtrado)

# --- ABA 4: V√çNCULO FUNCIONAL ---
with tab4:
    st.markdown("#### Docentes por V√≠nculo Funcional e Depend√™ncia Administrativa")
    # Filtra o dataframe espec√≠fico desta aba
    df_filtrado = dfs['vinculo'][
        (dfs['vinculo']['Ano'] == ano_selecionado) &
        (dfs['vinculo']['Munic√≠pio'] == municipio_selecionado)
    ]
    
    # Preparando os dados para o gr√°fico (transforma colunas em linhas)
    dados_grafico = df_filtrado.melt(
        id_vars=['V√≠nculo Funcional'], 
        value_vars=['Federal', 'Estadual', 'Municipal'], 
        var_name='Depend√™ncia Administrativa', 
        value_name='Quant. de Docentes'
    )
    
    # Removendo v√≠nculos que n√£o t√™m docentes para limpar o gr√°fico
    dados_grafico = dados_grafico[dados_grafico['Quant. de Docentes'] > 0]

    # Criando o gr√°fico de barras facetado com o argumento 'facet_col'
    fig = px.bar(
        dados_grafico,
        x='Quant. de Docentes',
        y='V√≠nculo Funcional',
        color='Depend√™ncia Administrativa',  # Atribui cores diferentes para cada depend√™ncia
        facet_col='Depend√™ncia Administrativa', # CRIA OS SUBPLOTS (um para cada depend√™ncia)
        facet_col_spacing=0.04, # Espa√ßamento entre os subplots
        facet_col_wrap=1, # Limita o n√∫mero de colunas (subplots) a 1 por linha
        labels={'Quant. de Docentes': 'Quant. de Docentes', 'V√≠nculo Funcional': 'Tipo de V√≠nculo'},
        title=f"Quantidade de docentes por v√≠nculo funcional para o munic√≠pio de {municipio_selecionado}",
        text_auto=True,
        orientation='h'
    )
    
    # Removendo os t√≠tulos repetidos dos eixos x e y
    fig.update_xaxes(title_text="")
    fig.update_yaxes(title_text="")

    # Removendo os t√≠tulos (anota√ß√µes) de cada subplot (ex: "Depend√™ncia Administrativa=Federal")
    fig.for_each_annotation(lambda a: a.update(text=""))
    
    # Adicionando um t√≠tulo centralizado para o eixo X
    fig.update_layout(
        xaxis_title="Quantidade de Docentes",  # T√≠tulo centralizado para o eixo X
    )

    st.plotly_chart(fig, use_container_width=True)
    
    # Exibindo dataframe
    st.dataframe(df_filtrado)

    # Mensagem explicativa sobre os dados
    st.info("O mesmo docente pode ser contabilizado mais de uma vez, por atuar com mais de um v√≠nculo.")

# --- ABA 5: DEPEND√äNCIA E LOCALIZA√á√ÉO ---
with tab5:
    st.markdown("#### Docentes por Depend√™ncia Administrativa e Localiza√ß√£o")
    
    # Filtra o dataframe espec√≠fico desta aba
    df_filtrado = dfs['dependencia'][
        (dfs['dependencia']['Ano'] == ano_selecionado) &
        (dfs['dependencia']['Munic√≠pio'] == municipio_selecionado)
    ]

    # Prepara os dados para o gr√°fico
    colunas_dependencia = ['Federal', 'Estadual', 'Municipal']
    dados_grafico = df_filtrado.melt(id_vars=['Localiza√ß√£o'], value_vars=colunas_dependencia, var_name='Depend√™ncia Administrativa', value_name='Quant. de Docentes')
    
    # Cria o gr√°fico de barras agrupado por sexo
    fig = px.bar(dados_grafico, x='Depend√™ncia Administrativa', y='Quant. de Docentes', color='Localiza√ß√£o', barmode='group', text_auto=True, title="Quantidade de docentes por localiza√ß√£o e depend√™ncia administrativa, segundo o munic√≠pio")
    st.plotly_chart(fig, use_container_width=True)    

    st.dataframe(df_filtrado)
    
    # Mensagem explicativa sobre os dados
    st.info("O mesmo docente pode ser contabilizado mais de uma vez, por atuar em mais de uma localiza√ß√£o e/ou depend√™ncia administrativa.")

# --- RODAP√â ---
st.markdown("---")
st.write("¬© 2025 DocentES. Todos os direitos reservados.")
st.markdown("Desenvolvido por Farley C. Sardinha | Dados do Censo Escolar de 2022 a 2024: [INEP](https://www.gov.br/inep/pt-br/acesso-a-informacao/dados-abertos/sinopses-estatisticas/educacao-basica)")