# Importando as bibliotecas necess√°rias
import streamlit as st
import unicodedata
import pandas as pd
import plotly.express as px

# --- CONFIGURA√á√ÉO DA P√ÅGINA ---
st.set_page_config(
    page_title="DocentES | Censo Escolar",
    page_icon="üë©üèª‚Äçüè´",
    layout="wide"
)

# --- FUN√á√ÉO PARA CARREGAR TODOS OS DADOS ---
@st.cache_data
def carregar_dados():
    """
    Esta fun√ß√£o carrega todos os 5 arquivos CSV em DataFrames separados
    e os retorna em um dicion√°rio para f√°cil acesso.
    """
    # Nomes dos arquivos
    nomes_arquivos = {
        "dependencia": "docentes_dependencia.csv",
        "etapas": "docentes_etapas.csv",
        "formacao": "docentes_formacao.csv",
        "idade": "docentes_idade.csv",
        "vinculo": "docentes_vinculo.csv"
    }
    
    dataframes = {}
    for nome, caminho in nomes_arquivos.items():
        # Carrega cada dataframe usando ';' como separador
        df = pd.read_csv(caminho, delimiter=';')
        df.columns = df.columns.str.strip()
        dataframes[nome] = df
            
    return dataframes

# Carrega todos os dataframes
try:
    dfs = carregar_dados()
except FileNotFoundError as e:
    st.error(f"Erro ao carregar os dados: O arquivo {e.filename} n√£o foi encontrado.")
    st.info("Por favor, certifique-se de que todos os 5 arquivos CSV est√£o na mesma pasta que o app.py.")
    st.stop()

# --- DEFININDO BARRA LATERAL COM FILTROS (Ano e Munic√≠pio) ---

# Definindo fun√ß√£o auxiliar para normalizar texto para ordena√ß√£o
def normalizar_para_ordenacao(texto):
    """
    Remove acentos de uma string para us√°-la como chave de ordena√ß√£o.
    Ex: '√Åguia Branca' -> 'Aguia Branca'
    """
    # Normaliza a string para decompor os caracteres acentuados
    texto_normalizado = unicodedata.normalize('NFD', texto)
    # Remove os caracteres de combina√ß√£o (acentos)
    return "".join(c for c in texto_normalizado if unicodedata.category(c) != 'Mn')

# Foi usado o dataframe de 'etapas' como base para criar os filtros.
st.sidebar.header("‚öôÔ∏è Filtros")
st.sidebar.markdown("Use os filtros abaixo para selecionar o ano e o munic√≠pio desejados.")

# --- Filtro de Ano ---
ano_selecionado = st.sidebar.selectbox(
    "Selecione o Ano",
    options=sorted(
                    dfs['etapas']['Ano'].unique(), 
                    reverse=True
                  )
)

# --- Filtro de Munic√≠pio ---
# Criando a op√ß√£o geral
opcao_geral = ["Todos os Munic√≠pios"]
# Criando uma lista ordenada dos munic√≠pios
lista_municipios = sorted(
    dfs['etapas']['Munic√≠pio'].unique(),
    key=normalizar_para_ordenacao # Usando a fun√ß√£o de normaliza√ß√£o
    )
# Juntando as duas listas!
opcoes_municipios = opcao_geral + lista_municipios

# Usamos a nova lista completa como op√ß√µes do selectbox
municipio_selecionado = st.sidebar.selectbox(
    "Selecione o Munic√≠pio",
    options=opcoes_municipios
)

# --- CORPO PRINCIPAL DO APP ---

# T√≠tulo da aplica√ß√£o
st.title("üë©üèΩ‚Äçüè´ DocentES üë®üèª‚Äçüè´")
# Descri√ß√£o da aplica√ß√£o
st.markdown(
    "Bem-vindo √† DocentES, a plataforma sobre os Docentes do Esp√≠rito Santo!"
)

# Exibir uma explica√ß√£o sobre a aplica√ß√£o com expander e duas colunas
with st.expander("Sobre o que √© esta aplica√ß√£o?"):
    # Cria as colunas dentro do expander
    col1, col2 = st.columns([1,2])

    # Adiciona conte√∫do √† primeira coluna
    with col1:
        st.image("https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhWSVR_PA-xWPXwdQ5qyRDWAZZdVA1JhdQuaT6yI926pYTAg0boScUh3J-lsiu1i3KDyHJQmN_OgNx6HX4Zun6XDIRfqNXJe8CdyKcnwDymZp8P52JvRrKav0otT263CjHKyS_RitA5VPJFOg6NJ-uqRwuksj2r_J1mna9CnfEVq4psg-QMaH4bq2Uy2w/w485-h335/fc-removebg-preview.png", width=400)

    # Adiciona conte√∫do √† segunda coluna
    with col2:
        st.write("Esta aplica√ß√£o permite a an√°lise interativa dos dados de docentes do Esp√≠rito Santo, com base nas Sinopses Estat√≠sticas do Censo Escolar da Educa√ß√£o B√°sica.")
        st.write(
                    "Os dados utilizados foram os referentes aos anos de 2022 a 2024, que se encontram dispon√≠veis no site do INEP: " \
                    "(https://www.gov.br/inep/pt-br/acesso-a-informacao/dados-abertos/sinopses-estatisticas/educacao-basica)"
                )
        st.write("Aqui voc√™ pode explorar dados sobre os professores do estado, incluindo informa√ß√µes demogr√°ficas, forma√ß√£o acad√™mica, e muito mais.")
 
st.markdown("---")

# --- CRIA√á√ÉO DAS ABAS TEM√ÅTICAS (TABS) ---
st.subheader(f"Exibindo dados de quantidade de docentes, segundo o munic√≠pio e o ano selecionados.")

# Nomeando as abas tem√°ticas
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "üìä Etapas de Ensino",
    "üìä Faixa Et√°ria e Sexo",
    "üìä Forma√ß√£o Acad√™mica",
    "üìä V√≠nculo Funcional",
    "üìä Depend√™ncia e Localiza√ß√£o"
])

# --- ABA 1: ETAPAS DE ENSINO ---
with tab1:
    st.markdown("#### Docentes por Etapa de Ensino")
    df_etapas = dfs["etapas"]

    # --- Definindo containers dentro da aba ---
    # Container para o gr√°fico de barras
    c1 = st.container(border=True)

    # Selecionando as colunas para o gr√°fico
    colunas_etapas = ['Creche', 'Pr√©-Escola', 'EF - Anos Iniciais', 'EF - Anos Finais', 'EM Proped√™utico', 'EM Integrado']
    
    # Estabelecendo a l√≥gica para o gr√°fico, conforme o filtro de munic√≠pio
    if municipio_selecionado == "Todos os Munic√≠pios":
        # SE o usu√°rio escolher ver o estado todo:
        # 1. Filtrar o DataFrame apenas pelo ano
        df_filtrado = df_etapas[df_etapas['Ano'] == ano_selecionado]
        # 2. Somar os valores de todos os munic√≠pios, resultando em uma s√©rie
        dados_base = df_filtrado[colunas_etapas].sum()
        # 3. Transformar a s√©rie em um DataFrame longo
        dados_grafico = dados_base.reset_index()
        dados_grafico.columns = ['Etapa de Ensino', 'Quant. de Docentes']

    else:
        # SEN√ÉO (o usu√°rio escolheu um munic√≠pio espec√≠fico)...
        # 1. Filtrar o DataFrame pelo ano E pelo munic√≠pio
        df_filtrado = df_etapas[
            (df_etapas['Ano'] == ano_selecionado) &
            (df_etapas['Munic√≠pio'] == municipio_selecionado)
        ]
        # 2. TRANSFORMA a tabela larga em longa usando .melt()
        dados_grafico = df_filtrado[colunas_etapas].melt(var_name='Etapa de Ensino', value_name='Quant. de Docentes')

    # Gerando o gr√°fico    
    if not dados_grafico.empty:
            # Parametrizando o px.bar
            fig = px.bar(
                            dados_grafico, 
                            x='Etapa de Ensino', 
                            y='Quant. de Docentes', 
                            color='Etapa de Ensino',
                            text_auto=True, 
                            title=f"Docentes por Etapa de Ensino em {municipio_selecionado} ({ano_selecionado})"
                        )
            # Adicionando a formata√ß√£o de n√∫meros brasileiros
            fig.update_layout(
                                separators=',.',
                                showlegend=False
                            )
            fig.update_yaxes(tickformat=",.0f")
            
            c1.plotly_chart(fig, use_container_width=True)    
    else:
            c1.warning("Nenhum dado encontrado para a sele√ß√£o atual.")
        
    # Exibindo o dataframe filtrado correspondente
    with c1.expander("Ver tabela de dados"):
        st.dataframe(df_filtrado)    

    # --- Container 2: Gr√°fico de Linhas (a evolu√ß√£o temporal) ---
    st.markdown("---") # Linha divis√≥ria
    c1t = st.container(border=True)
    c1t.markdown("##### An√°lise da Evolu√ß√£o Temporal (2022-2024)")

    # 1. Preparando os dados para a an√°lise temporal
    if municipio_selecionado == "Todos os Munic√≠pios":
        # Se for o estado todo, agrupamos por ano e somamos
        dados_temporais = df_etapas.groupby('Ano')[colunas_etapas].sum()
    else:
        # Se for um munic√≠pio, filtramos e definimos o ano como √≠ndice
        dados_temporais = df_etapas[df_etapas['Munic√≠pio'] == municipio_selecionado].set_index('Ano')[colunas_etapas]
    
    # 2. Criamos o FILTRO para a etapa de ensino que voc√™ sugeriu
    col_filtro, col_vazia = c1t.columns([2, 3])
    with col_filtro:
        etapa_selecionada = st.selectbox(
            "Selecione a Etapa para ver a tend√™ncia:",
            options=colunas_etapas
        )
    
    # 3. Selecionamos apenas a coluna (etapa) que o usu√°rio escolheu
    dados_linha = dados_temporais[[etapa_selecionada]] # Usar colchetes duplos mant√©m como DataFrame

    # 4. Usamos px.line com formata√ß√£o ---
if not dados_linha.empty:
    # Criando a figura base com Plotly Express
    fig_linha = px.line(
                        dados_linha,
                        markers=True, # Adiciona pontos sobre a linha para destacar os anos
                        labels={'value': 'Quant. de Docentes', 'Ano': 'Ano'}
                    )

    # Formata os separadores para o padr√£o brasileiro
    fig_linha.update_layout(separators=',.',showlegend=False)
    
    # Formata o eixo Y (quantidade) para ter separador de milhar e sem decimais
    fig_linha.update_yaxes(tickformat=",.0f")
    
    # Formata o eixo X (ano) para mostrar apenas os n√∫meros inteiros
    # O 'd' em tickformat significa 'decimal integer'
    fig_linha.update_xaxes(tickformat='d', tickvals=dados_temporais.index)

    # Exibindo a figura do Plotly
    c1t.plotly_chart(fig_linha, use_container_width=True)
else:
    c1t.warning("Nenhum dado encontrado para a sele√ß√£o.")

    # Mensagem explicativa sobre os dados
    st.info("O mesmo docente pode ser contabilizado mais de uma vez, por atuar em diferentes etapas de ensino.")

# --- ABA 2: FAIXA ET√ÅRIA E SEXO ---
with tab2:
    st.markdown("#### Docentes por Faixa Et√°ria e Sexo")
    df_idade = dfs["idade"]

    c2 = st.container(border=True)

    colunas_idade = ['At√© 24 anos', 'De 25 a 29 anos', 'De 30 a 39 anos', 'De 40 a 49 anos', 'De 50 a 54 anos', 'De 55 a 59 anos', '60 anos ou mais']

    # L√≥gica de prepara√ß√£o de dados
    if municipio_selecionado == "Todos os Munic√≠pios":
        df_filtrado = df_idade[df_idade['Ano'] == ano_selecionado]
        dados_base = df_filtrado.groupby('Sexo')[colunas_idade].sum().reset_index()
    else:
        dados_base = df_idade[
            (df_idade['Ano'] == ano_selecionado) &
            (df_idade['Munic√≠pio'] == municipio_selecionado)
        ]

    # Transforma√ß√£o com .melt()
    dados_grafico = dados_base.melt(
        id_vars=['Sexo'], 
        value_vars=colunas_idade, 
        var_name='Faixa Et√°ria', 
        value_name='Quant. de Docentes'
    )

    # Ordena√ß√£o correta das categorias
    ordem_faixa_etaria = ['At√© 24 anos', 'De 25 a 29 anos', 'De 30 a 39 anos', 'De 40 a 49 anos', 'De 50 a 54 anos', 'De 55 a 59 anos', '60 anos ou mais']
    dados_grafico['Faixa Et√°ria'] = pd.Categorical(dados_grafico['Faixa Et√°ria'], categories=ordem_faixa_etaria, ordered=True)

    # Gerando o gr√°fico
    if not dados_grafico.empty:
        fig = px.bar(
            dados_grafico,
            x='Faixa Et√°ria',
            y='Quant. de Docentes',
            color='Sexo',
            barmode='group',
            text_auto=True,
            title=f"Docentes por Faixa Et√°ria e Sexo em {municipio_selecionado} ({ano_selecionado})"
        )
        fig.update_layout(separators=',.')
        fig.update_yaxes(tickformat=",.0f")
        c2.plotly_chart(fig, use_container_width=True)
    else:
        c2.warning("Nenhum dado encontrado para a sele√ß√£o atual.")

    with c2.expander("Ver tabela de dados"):
        st.dataframe(dados_base)

    # --- Container 2: Gr√°fico de Linhas (Evolu√ß√£o Temporal) ---
    st.markdown("---")
    c2t = st.container(border=True)
    c2t.markdown("##### An√°lise Comparativa da Evolu√ß√£o Temporal (Feminino vs. Masculino), por Faixa Et√°ria")

    colunas_idade = ['At√© 24 anos', 'De 25 a 29 anos', 'De 30 a 39 anos', 'De 40 a 49 anos', 'De 50 a 54 anos', 'De 55 a 59 anos', '60 anos ou mais']

    # Preparamos os dados base
    if municipio_selecionado == "Todos os Munic√≠pios":
        dados_base = df_idade
    else:
        dados_base = df_idade[df_idade['Munic√≠pio'] == municipio_selecionado]

    # Adicionamos o filtro para a Faixa Et√°ria
    col_filtro, col_vazia = c2t.columns([2, 3])
    with col_filtro:
        idade_selecionada = st.selectbox(
            "Selecione a Faixa Et√°ria para An√°lise:",
            options=colunas_idade,
            key="filtro_idade_linha_final"
        )

    # Agrupamos por Ano E Sexo, selecionando e somando a coluna da idade escolhida
    dados_agrupados = dados_base.groupby(['Ano', 'Sexo'])[idade_selecionada].sum()

    # O .unstack() transforma 'Feminino' e 'Masculino' em colunas
    dados_para_plotar = dados_agrupados.unstack()

    # Gerando o Gr√°fico
    if not dados_para_plotar.empty:
        fig_linha = px.line(
            dados_para_plotar,
            markers=True,
            labels={'value': f'Quant. de Docentes ({idade_selecionada})', 'Ano': 'Ano', 'variable': 'Sexo'}
        )
        fig_linha.update_layout(separators=',.')
        fig_linha.update_yaxes(tickformat=",.0f")
        fig_linha.update_xaxes(tickformat='d', tickvals=dados_para_plotar.index)
        
        c2t.plotly_chart(fig_linha, use_container_width=True)
    else:
        c2t.warning("Nenhum dado encontrado para a sele√ß√£o.")

# --- ABA 3: N√çVEL DE FORMA√á√ÉO ---
with tab3:
    st.markdown("#### Docentes por Escolaridade ou N√≠vel de Forma√ß√£o Acad√™mica")
    df_formacao = dfs["formacao"]

    c3 = st.container(border=True)

    colunas_formacao = ['Ensino Fundamental', 'Ensino M√©dio', 'Gradua√ß√£o - Licenciatura', 'Gradua√ß√£o - Sem Licenciatura', 'Especializa√ß√£o', 'Mestrado', 'Doutorado']

    if municipio_selecionado == "Todos os Munic√≠pios":
        df_filtrado = df_formacao[df_formacao['Ano'] == ano_selecionado]
        dados_base = df_filtrado[colunas_formacao].sum()
        dados_para_plotar = dados_base.reset_index()
        dados_para_plotar.columns = ['Forma√ß√£o Acad√™mica', 'Quant. de Docentes']
    else:
        df_filtrado = df_formacao[
            (df_formacao['Ano'] == ano_selecionado) &
            (df_formacao['Munic√≠pio'] == municipio_selecionado)
        ]
        dados_para_plotar = df_filtrado[colunas_formacao].melt(var_name='Forma√ß√£o Acad√™mica', value_name='Quant. de Docentes')

    # Ordena√ß√£o correta das categorias
    ordem_formacao = ['Ensino Fundamental', 'Ensino M√©dio', 'Gradua√ß√£o - Licenciatura', 'Gradua√ß√£o - Sem Licenciatura', 'Especializa√ß√£o', 'Mestrado', 'Doutorado']
    dados_para_plotar['Forma√ß√£o Acad√™mica'] = pd.Categorical(dados_para_plotar['Forma√ß√£o Acad√™mica'], categories=ordem_formacao, ordered=True)
    dados_para_plotar = dados_para_plotar.sort_values('Forma√ß√£o Acad√™mica')

    if not dados_para_plotar.empty:
        fig = px.bar(
            dados_para_plotar,
            x='Quant. de Docentes',
            y='Forma√ß√£o Acad√™mica',
            color='Forma√ß√£o Acad√™mica',
            orientation='h',
            text_auto=True,
            title=f"Docentes por Escolaridade ou Forma√ß√£o Acad√™mica em {municipio_selecionado} ({ano_selecionado})"
        )
        fig.update_layout(separators=',.', showlegend=False)
        fig.update_xaxes(tickformat=",.0f")
        c3.plotly_chart(fig, use_container_width=True)
    else:
        c3.warning("Nenhum dado encontrado para a sele√ß√£o atual.")
    
    with c3.expander("Ver tabela de dados"):
        st.dataframe(df_filtrado)

    # --- Container 2: Gr√°fico de Linhas (Evolu√ß√£o Temporal) ---
    st.markdown("---")
    c3t = st.container(border=True)
    c3t.markdown("##### An√°lise da Evolu√ß√£o Temporal por N√≠vel de Forma√ß√£o")

    colunas_formacao = ['Ensino Fundamental', 'Ensino M√©dio', 'Gradua√ß√£o - Licenciatura', 'Gradua√ß√£o - Sem Licenciatura', 'Especializa√ß√£o', 'Mestrado', 'Doutorado']

    if municipio_selecionado == "Todos os Munic√≠pios":
        dados_temporais = df_formacao.groupby('Ano')[colunas_formacao].sum()
    else:
        dados_temporais = df_formacao[df_formacao['Munic√≠pio'] == municipio_selecionado].groupby('Ano')[colunas_formacao].sum()
        
    col_filtro, col_vazia = c3t.columns([1, 1])
    with col_filtro:
        formacao_selecionada = st.selectbox(
            "Selecione o N√≠vel de Forma√ß√£o para ver a tend√™ncia:",
            options=colunas_formacao,
            key="filtro_formacao_linha"
        )
        
    dados_linha = dados_temporais[[formacao_selecionada]]

    if not dados_linha.empty:
        fig_linha = px.line(dados_linha, markers=True, labels={'value': 'Quant. de Docentes', 'Ano': 'Ano'})
        fig_linha.update_layout(separators=',.', showlegend=False)
        fig_linha.update_yaxes(tickformat=",.0f")
        fig_linha.update_xaxes(tickformat='d', tickvals=dados_temporais.index)
        c3t.plotly_chart(fig_linha, use_container_width=True)
    else:
        c3t.warning("Nenhum dado encontrado para a sele√ß√£o.")

# --- ABA 4: V√çNCULO FUNCIONAL ---
with tab4:
    st.markdown("#### Docentes por V√≠nculo Funcional e Depend√™ncia Administrativa")
    df_vinculo = dfs["vinculo"]

    c4 = st.container(border=True)
    colunas_vinculo = ['Federal', 'Estadual', 'Municipal']

    if municipio_selecionado == "Todos os Munic√≠pios":
        df_filtrado = df_vinculo[df_vinculo['Ano'] == ano_selecionado]
        dados_base = df_filtrado.groupby('V√≠nculo Funcional')[colunas_vinculo].sum().reset_index()
    else:
        dados_base = df_vinculo[
            (df_vinculo['Ano'] == ano_selecionado) &
            (df_vinculo['Munic√≠pio'] == municipio_selecionado)
        ]

    dados_para_plotar = dados_base.melt(
        id_vars=['V√≠nculo Funcional'], 
        value_vars=colunas_vinculo, 
        var_name='Depend√™ncia Administrativa', 
        value_name='Quant. de Docentes'
    )
    dados_para_plotar = dados_para_plotar[dados_para_plotar['Quant. de Docentes'] > 0]

    if not dados_para_plotar.empty:
        fig = px.bar(
            dados_para_plotar,
            x='Quant. de Docentes',
            y='V√≠nculo Funcional',
            color='Depend√™ncia Administrativa',
            facet_col='Depend√™ncia Administrativa',
            facet_col_spacing=0.05, # Usando o par√¢metro correto de espa√ßamento
            orientation='h',
            text_auto=True,
            title=f"Docentes por V√≠nculo em {municipio_selecionado} ({ano_selecionado})"
        )
        fig.for_each_annotation(lambda a: a.update(text="")) # Remove t√≠tulos dos subplots
        fig.update_layout(separators=',.')
        fig.update_xaxes(tickformat=",.0f", title_text="Quantidade de Docentes")
        c4.plotly_chart(fig, use_container_width=True)
    else:
        c4.warning("Nenhum dado encontrado para a sele√ß√£o atual.")
    
    with c4.expander("Ver tabela de dados"):
        st.dataframe(dados_base)

    # --- Container 2: Gr√°fico de Linhas (Evolu√ß√£o Temporal) ---
    st.markdown("---")
    c4t = st.container(border=True)
    c4t.markdown("##### An√°lise Comparativa da Evolu√ß√£o Temporal (Depend√™ncias Administrativas), por V√≠nculo Funcional")

    colunas_dependencia = ['Federal', 'Estadual', 'Municipal']

    # Preparamos os dados base
    if municipio_selecionado == "Todos os Munic√≠pios":
        dados_base = df_vinculo
    else:
        dados_base = df_vinculo[df_vinculo['Munic√≠pio'] == municipio_selecionado]

    # Adicionamos o filtro para o V√≠nculo Funcional
    lista_vinculos = dados_base['V√≠nculo Funcional'].unique().tolist()
    col_filtro, col_vazia = c4t.columns([2, 3])
    with col_filtro:
        vinculo_selecionado = st.selectbox(
            "Selecione o V√≠nculo para An√°lise:",
            options=lista_vinculos,
            key="filtro_vinculo_linha_final"
        )

    # Filtramos primeiro pelo v√≠nculo selecionado
    dados_filtrados_vinculo = dados_base[dados_base['V√≠nculo Funcional'] == vinculo_selecionado]

    # Agora, agrupamos por Ano e somamos as colunas de depend√™ncia
    dados_para_plotar = dados_filtrados_vinculo.groupby('Ano')[colunas_dependencia].sum()

    # Gerando o Gr√°fico
    if not dados_para_plotar.empty:
        # O Plotly criar√° uma linha para cada coluna (Federal, Estadual, Municipal)
        fig_linha = px.line(
            dados_para_plotar,
            markers=True,
            labels={'value': f'Quant. de Docentes ({vinculo_selecionado})', 'Ano': 'Ano', 'variable': 'Depend√™ncia'}
        )
        fig_linha.update_layout(separators=',.')
        fig_linha.update_yaxes(tickformat=",.0f")
        fig_linha.update_xaxes(tickformat='d', tickvals=dados_para_plotar.index)
        
        c4t.plotly_chart(fig_linha, use_container_width=True)
    else:
        c4t.warning("Nenhum dado encontrado para a sele√ß√£o.")

    # Mensagem explicativa sobre os dados
    st.info("O mesmo docente pode ser contabilizado mais de uma vez, por atuar com mais de um v√≠nculo.")

# --- ABA 5: DEPEND√äNCIA E LOCALIZA√á√ÉO ---
with tab5:
    st.markdown("#### Docentes por Depend√™ncia Administrativa e Localiza√ß√£o")
    df_dependencia = dfs["dependencia"]

    c5 = st.container(border=True)
    colunas_dependencia = ['Federal', 'Estadual', 'Municipal', 'Privada']

    if municipio_selecionado == "Todos os Munic√≠pios":
        df_filtrado = df_dependencia[df_dependencia['Ano'] == ano_selecionado]
        dados_base = df_filtrado.groupby('Localiza√ß√£o')[colunas_dependencia].sum().reset_index()
    else:
        dados_base = df_dependencia[
            (df_dependencia['Ano'] == ano_selecionado) &
            (df_dependencia['Munic√≠pio'] == municipio_selecionado)
        ]

    dados_para_plotar = dados_base.melt(
        id_vars=['Localiza√ß√£o'], 
        value_vars=colunas_dependencia, 
        var_name='Depend√™ncia', 
        value_name='Quant. de Docentes'
    )

    if not dados_para_plotar.empty:
        fig = px.bar(
            dados_para_plotar,
            x='Localiza√ß√£o',
            y='Quant. de Docentes',
            color='Depend√™ncia',
            barmode='group',
            text_auto=True,
            title=f"Docentes por Localiza√ß√£o e Depend√™ncia em {municipio_selecionado} ({ano_selecionado})"
        )
        fig.update_layout(separators=',.')
        fig.update_yaxes(tickformat=",.0f")
        c5.plotly_chart(fig, use_container_width=True)
    else:
        c5.warning("Nenhum dado encontrado para a sele√ß√£o atual.")

    with c5.expander("Ver tabela de dados"):
        st.dataframe(dados_base)
    
    # --- Container 2: Gr√°fico de Linhas (Evolu√ß√£o Temporal) ---
    st.markdown("---")
    c5t = st.container(border=True)
    c5t.markdown("##### An√°lise Comparativa da Evolu√ß√£o Temporal (Urbana vs. Rural), por Depend√™ncia Administrativa")

    colunas_dependencia = ['Federal', 'Estadual', 'Municipal', 'Privada']

    # Preparamos os dados base (Estado ou Munic√≠pio)
    if municipio_selecionado == "Todos os Munic√≠pios":
        dados_base = df_dependencia
    else:
        dados_base = df_dependencia[df_dependencia['Munic√≠pio'] == municipio_selecionado]

    # Filtro de depend√™ncia administrativa
    col_filtro, col_vazia = c5t.columns([2, 3])
    with col_filtro:
        dependencia_selecionada = st.selectbox(
            "Selecione a Depend√™ncia para An√°lise:",
            options=colunas_dependencia,
            key="filtro_dependencia_linha"
        )

    # --- PREPARA√á√ÉO DOS DADOS COM BASE NA DEPEND√äNCIA SELECIONADA ---

    # Selecionando APENAS a coluna da depend√™ncia que o usu√°rio escolheu e somamos
    dados_agrupados = dados_base.groupby(['Ano', 'Localiza√ß√£o'])[dependencia_selecionada].sum()

    # 3. Transformando as localiza√ß√µes 'Urbana' e 'Rural' em colunas, com .unstack()
    dados_para_plotar = dados_agrupados.unstack()

    # --- Gerando o Gr√°fico ---
    if dados_para_plotar.empty:
        c5t.warning("Nenhum dado encontrado para a sele√ß√£o atual.")
    else:
        # O Plotly cria automaticamente uma linha para 'Urbana' e outra para 'Rural'
        fig_linha = px.line(
            dados_para_plotar,
            markers=True,
            labels={'value': f'Quant. de Docentes (Rede {dependencia_selecionada})', 'Ano': 'Ano', 'variable': 'Localiza√ß√£o'}
        )

        fig_linha.update_layout(separators=',.')
        fig_linha.update_yaxes(tickformat=",.0f")
        fig_linha.update_xaxes(tickformat='d', tickvals=dados_para_plotar.index)
        
        c5t.plotly_chart(fig_linha, use_container_width=True)

    # Mensagem explicativa sobre os dados
    st.info("O mesmo docente pode ser contabilizado mais de uma vez, por atuar em mais de uma localiza√ß√£o e/ou depend√™ncia administrativa.")

# --- RODAP√â DA APLICA√á√ÉO ---
st.markdown("---")
st.markdown("¬© 2025 DocentES. Desenvolvido por Farley C. Sardinha. Todos os direitos reservados.")